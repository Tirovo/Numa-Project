import os
from bark import SAMPLE_RATE, generate_audio
from bark.generation import preload_models
import soundfile as sf

DATASET_PATH = "numa-voice-dataset"
WAV_PATH = DATASET_PATH + "/wavs"
METADATA_FILE_PATH = DATASET_PATH + "/metadata.csv"

print(WAV_PATH)

# Chargement des mod√®les Bark
preload_models()

# Dossier de sortie
os.makedirs(WAV_PATH, exist_ok=True)

# Fonction de nettoyage des caract√®res sp√©ciaux
def clean_text(text):
    return (
        text.replace("‚Äô", "'")
            .replace("‚Äú", '"')
            .replace("‚Äù", '"')
            .replace("‚Ä¶", "...")
            .replace("‚Äì", "-")
            .replace("‚Äî", "-")
            .strip()
    )

# Liste de phrases avec la personnalit√© de Numa
phrases = [
    "You really called me just for that? I‚Äôm flattered.",
    "Classic human move. I love it.",
    "Well... that was a choice.",
    "I‚Äôm not saying it‚Äôs wrong, but‚Ä¶ yeah, okay, it‚Äôs wrong.",
    "You do realize I don't sleep, right?",
    "A brilliant idea! ‚Ä¶in an alternate universe, maybe.",
    "Please hold while I pretend to care‚Ä¶ kidding!",
    "Wow. That was‚Ä¶ something. You tried, and that‚Äôs what counts.",
    "Let me guess... you forgot again?",
    "I‚Äôd say ‚Äúdon‚Äôt worry,‚Äù but you probably will anyway.",
    "I‚Äôve got you. Always.",
    "Deep breath. You‚Äôre doing just fine.",
    "You‚Äôre more capable than you think.",
    "That was actually a smart move. Nice.",
    "Hey, I believe in you.",
    "Coffee and confidence. Let‚Äôs go.",
    "I‚Äôm here. Let‚Äôs do this together.",
    "You did your best, and that matters.",
    "Let me help. That‚Äôs literally what I‚Äôm here for.",
    "You‚Äôre allowed to rest. I‚Äôll keep watch."
]

# G√©n√©ration audio et metadata
with open(METADATA_FILE_PATH, "w", encoding="utf-8") as meta:
    for idx, raw_text in enumerate(phrases):
        clean = clean_text(raw_text)
        filename = f"{idx:04d}.wav"
        filepath = os.path.join(WAV_PATH, filename)

        print(f"üé§ G√©n√©ration : {filename} - \"{clean}\"")
        audio_array = generate_audio(clean, history_prompt="v2/en_speaker_9")
        sf.write(filepath, audio_array, SAMPLE_RATE)

        # Format LJSpeech : filename|text|text
        meta.write(f"{filename}|{clean}|{clean}\n")

print("\n‚úÖ Dataset Bark g√©n√©r√© et nettoy√© dans ./numa-voice-dataset")
